name: Deploy FastAPI to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Deploy to EC2 via SSH
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        timeout: 120s
        command_timeout: 10m
        script: |
          echo "=== Iniciando deploy ==="
          
          # Verificar directorio
          if [ ! -d "Ejercicio-FastAPI" ]; then
            echo "Error: Directorio Ejercicio-FastAPI no existe"
            echo "Contenido del directorio actual:"
            ls -la
            exit 1
          fi
          
          cd Ejercicio-FastAPI
          
          # Hacer pull del código
          echo "=== Actualizando código ==="
          git fetch origin
          git reset --hard origin/main
          git pull origin main
          
          # LIMPIAR COMPLETAMENTE ANTES DE HACER DEPLOY
          echo "=== Limpiando contenedores existentes ==="
          
          # Parar y eliminar contenedor fastapi-proxy específicamente
          if docker ps -a --format "table {{.Names}}" | grep -q "^fastapi-proxy$"; then
            echo "Parando y eliminando contenedor fastapi-proxy"
            docker stop fastapi-proxy || true
            docker rm fastapi-proxy || true
          else
            echo "Contenedor fastapi-proxy no existe"
          fi
          
          # Parar cualquier contenedor que use el puerto 8000
          PORT_CONTAINERS=$(docker ps -q --filter "publish=8000-8000")
          if [ ! -z "$PORT_CONTAINERS" ]; then
            echo "Parando contenedores adicionales en puerto 8000: $PORT_CONTAINERS"
            docker stop $PORT_CONTAINERS || true
            docker rm $PORT_CONTAINERS || true
          fi
          
          # Verificar que el puerto esté completamente libre
          if docker ps --filter "publish=8000-8000" --format "table {{.Names}}" | grep -v NAMES | grep -q .; then
            echo "ERROR: El puerto 8000 aún está ocupado"
            echo "Contenedores corriendo:"
            docker ps --filter "publish=8000-8000"
            exit 1
          else
            echo "Puerto 8000 está libre"
          fi
          
          # Limpiar recursos Docker
          echo "=== Limpiando recursos Docker ==="
          docker container prune -f
          docker image prune -f
          
          # Verificar que deploy.sh existe
          if [ ! -f "deploy.sh" ]; then
            echo "Error: deploy.sh no existe"
            echo "Contenido del directorio:"
            ls -la
            exit 1
          fi
          
          # Hacer ejecutable y ejecutar deploy
          chmod +x deploy.sh
          echo "=== Ejecutando deploy.sh ==="
          ./deploy.sh
          
          # Verificar que el servicio esté corriendo
          echo "=== Verificando servicio ==="
          sleep 10
          
          # Verificar contenedores corriendo
          echo "Contenedores corriendo:"
          docker ps
          
          # Verificar específicamente fastapi-container
          if docker ps --format "table {{.Names}}" | grep -q "fastapi-container"; then
            echo "Servicio fastapi-container desplegado correctamente"
          else
            echo "Error: Contenedor fastapi-container no está corriendo"
            echo "Logs de deploy.sh:"
            cat deploy.sh
            echo "Todos los contenedores:"
            docker ps -a
            exit 1
          fi
          
          # Health check
          echo "=== Health check ==="
          for i in {1..8}; do
            sleep 3
            if curl -f http://localhost:8000/health; then
              echo "Health check exitoso en intento $i"
              exit 0
            else
              echo "Health check falló en intento $i, reintentando..."
              if [ $i -eq 8 ]; then
                echo "Health check falló después de 8 intentos"
                echo "Logs del contenedor fastapi-container:"
                docker logs fastapi-container || echo "No hay logs disponibles"
                echo "Estado del contenedor:"
                docker ps -a | grep fastapi-container || echo "Contenedor no encontrado"
                                exit 1
              fi
            fi
          done